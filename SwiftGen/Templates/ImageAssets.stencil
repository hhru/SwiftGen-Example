// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen
{% if catalogs %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
import UIKit.UIImage

{% macro enumBlock assets sp %}
{{sp}}{% call casesBlock assets sp %}
{{sp}}{% if not param.noAllValues %}

{{sp}}// swiftlint:disable trailing_comma
{{sp}}{{accessModifier}} static let allImages: [UIImage] = [
{{sp}}{% set sp2 %}{{sp}}    {% endset %}
{{sp}}{% call allValuesBlock assets "image" "" sp2 %}
{{sp}}]
{{sp}}{% endif %}
{% endmacro %}

{% macro casesBlock assets sp %}
{{sp}}{% for asset in assets %}
{{sp}}{% if asset.type == "image" %}
{{sp}}{{accessModifier}} static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: UIImage {
{{sp}}    return image(named: "{{asset.value}}")
{{sp}}}
{{sp}}{% elif asset.items %}

{{sp}}{{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{{sp}}{% set sp2 %}{{sp}}    {% endset %}
{{sp}}{% call casesBlock asset.items sp2 %}
{{sp}}}
{{sp}}{% endif %}
{{sp}}{% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix sp %}
{{sp}}{% for asset in assets %}
{{sp}}{% if asset.type == filter %}
{{sp}}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{{sp}}{% elif asset.items %}
{{sp}}{% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{{sp}}{% call allValuesBlock asset.items filter prefix2 sp %}
{{sp}}{% endif %}
{{sp}}{% endfor %}
{% endmacro %}
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name line_length nesting type_body_length type_name file_length
{{accessModifier}} enum {{enumName}} {
    {% if catalogs.count > 1 %}
    {% for catalog in catalogs %}
    {{accessModifier}} enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% call enumBlock catalog.assets "    " %}
    }
    {% endfor %}
    {% else %}
    {% call enumBlock catalogs.first.assets "    " %}
    {% endif %}

    private static func image(named name: String) -> UIImage {
        let bundle = Bundle(for: BundleToken.self)
        guard let image = UIImage(named: name, in: bundle, compatibleWith: nil) else {
            fatalError("Unable to load image named \(name).")
        }
        return image
    }
}

private final class BundleToken {}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name file_length
{% else %}
// No assets found
{% endif %}